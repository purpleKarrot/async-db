[library Boost.SQL
 [quickbook 1.3]
 [authors [Pfeifer, Daniel] ]
 [copyright 2008-2009 Daniel Pfeifer]
 [purpose A portable C++ Library to access databases with prepared SQL statements.]
 [id sql]
 [dirname sql]
 [license
  Distributed under the Boost Software License, Version 1.0.[br]
  (See accompanying file LICENSE_1_0.txt or copy at
  [@http://www.boost.org/LICENSE_1_0.txt])
 ]
]

[def __MYSQL__
 [@http://www.mysql.com/ MySQL]
 ([@http://dev.mysql.com/doc/refman/5.0/en/c.html API])
]

[def __POSTGRES__
 [@http://www.postgresql.org/ PostgreSQL]
 ([@http://www.postgresql.org/docs/8.3/static/libpq.html API])
]

[def __SQLITE__
 [@http://www.sqlite.org/ SQLite3]
 ([@http://www.sqlite.org/c3ref/intro.html API])
]
  
[def __IBASE__
 [@http://www.firebirdsql.org/ Firebird]\/InterBase 6.0
 ([@http://www.ibphoenix.com/downloads/60ApiGuide.zip API])
]

[def __ODBC__
 [@http://wikipedia.org/wiki/ODBC ODBC]
 ([@http://msdn.microsoft.com/en-us/library/ms714562(VS.85).aspx API])
]

[def __ORACLE__
 [@http://www.oracle.com/technology/tech/oci/index.html Oracle Call Interface]
 ([@http://download.oracle.com/docs/cd/B14117_01/appdev.101/b10779/toc.htm API])
]

[section:intro Documentation]
Boost.SQL is a wrapper around the following C-APIs:

* __IBASE__
* __MYSQL__
* __ODBC__
* __ORACLE__
* __POSTGRES__
* __SQLITE__

The library makes prepared statements as easy to use as functions:

  // the statement class takes a signature as a template parameter
  sql::statement<void(int, std::string, boost::gregorian::date)>
    insert("INSERT INTO users (id, name, registered) VALUES (?, ?, ?)");
  sql::statement<int()> count("SELECT * FROM users WHERE id=?");

  // now you can use the statement object like a function with this signature
  insert(1002, "Carl", boost::gregorian::from_string("2002/1/25"));
  insert(1003, "Bob", boost::gregorian::day_clock::local_day());
  std::cout << count() << std::endl;

[note
  The number of parameters in the signature has to match the number of placeholders
  in the SQL string.
]

Allowed types include built-in integral and floating point types,
std::string, boost::gregorian::date (DATE),
boost::posix_time::time_duration (TIME), boost::posix_time::ptime (DATETIME)
as well as boost::optional<T> (for fields that may be NULL).

[$exploits_of_a_mom.png]
["Exploits of a Mom] Â© by Randall Munroe (CC-BY-NC-2.5), [@http://xkcd.com/327]

[endsect]

[/xinclude sql_autodoc.xml]
